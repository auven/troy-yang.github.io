<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>船长的技术博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://troyyang.com/"/>
  <updated>2017-07-22T09:36:31.617Z</updated>
  <id>http://troyyang.com/</id>
  
  <author>
    <name>杨舟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript中原型链继承的简单理解</title>
    <link href="http://troyyang.com/2017/06/25/Javascript_Prototype_Inherience_Understanding/"/>
    <id>http://troyyang.com/2017/06/25/Javascript_Prototype_Inherience_Understanding/</id>
    <published>2017-06-25T10:27:03.000Z</published>
    <updated>2017-07-22T09:36:31.617Z</updated>
    
    <content type="html"><![CDATA[<p>以前对于Javascipt中的继承，大部分只是基于代码层面，理论理解虽然看了很多，总是当时理解了过几天确又忘了怎么的了。这两天又看了一遍《Javascrip面向对象编程指南》，其中在说到原型链的时候有一段话解释了很多以前自己容易混淆的地方：</p>
<blockquote>
<p>首先我们知道每个对象都会有一个构造器，而原型本身也是一个对象，这意味着它必然也有一个构造器，而这个构造器又会有自己的原型，于是这种结构就会持续下去，形成一个原型链。</p>
</blockquote>
<h2 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h2><p>理解这段话并不难，可如果没有在实践中去理解，就会像以前一样，老是记不住。</p>
<h3 id="实例对象的各种属性"><a href="#实例对象的各种属性" class="headerlink" title="实例对象的各种属性"></a>实例对象的各种属性</h3><p>先看看最简单的内置对象string类型的各种构造函数（构造器）和原型，a一定是实例化的对象，而不是构造函数(构造函数一般是大写)。</p>
<p><img src="https://images.troyyang.com/2017-6-25-js-inherence.png" alt="image"></p>
<p>从上面我们可以很直观的看到很多东西：</p>
<ul>
<li>a是由String构造函数(constructor)创建的。</li>
<li>a的构造器函数(constructor)是有原型(prototype)的。</li>
<li>a是没有原型属性(prototype)的。</li>
<li>神秘的<strong>proto</strong>直接是对a构造器的原型的引用。</li>
</ul>
<p>所以如果a里有我们继承的原型属性值rating，我们平时就可以这样使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a.constructor === String</div><div class="line">a.constructor.prototype.rating === a.rating</div></pre></td></tr></table></figure></p>
<h3 id="构造函数的原型"><a href="#构造函数的原型" class="headerlink" title="构造函数的原型"></a>构造函数的原型</h3><p>在JS中实现继承的方式有很多，而我最喜欢这种<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance" target="_blank" rel="external">Mozilla</a>推荐的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function User(auth) &#123;</div><div class="line">    BaseManager.call(this, auth);</div><div class="line">&#125;</div><div class="line">User.prototype = Object.create(BaseManager.prototype); // IE8 不支持Object.create</div><div class="line">User.prototype.constructor = User;</div></pre></td></tr></table></figure></p>
<p>代码其实不难，也容易理解，首先是构造函数内调用基类，然后是原型覆盖，最后是构造函数重新赋值。其中最最最应该理解的是User是个构造函数而不是实例化的对象，只有构造函数是有prototype属性的，这和上面的实例化对象a是不一样的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前对于Javascipt中的继承，大部分只是基于代码层面，理论理解虽然看了很多，总是当时理解了过几天确又忘了怎么的了。这两天又看了一遍《Javascrip面向对象编程指南》，其中在说到原型链的时候有一段话解释了很多以前自己容易混淆的地方：&lt;/p&gt;
&lt;blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://troyyang.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://troyyang.com/tags/javascript/"/>
    
      <category term="web前端" scheme="http://troyyang.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Travis-ci自动编译部署github上的项目</title>
    <link href="http://troyyang.com/2017/06/24/Travis_Auto_Build_Deploy_Github_Projects/"/>
    <id>http://troyyang.com/2017/06/24/Travis_Auto_Build_Deploy_Github_Projects/</id>
    <published>2017-06-24T10:31:22.000Z</published>
    <updated>2017-07-22T09:36:31.617Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Hexo写完一篇博客后，都需要手动在本地编译，并生成静态文件，最后在上传至github服务器上才能发布，繁琐步骤姑且不说，万一哪天换了台电脑，没有Hexo环境的时候如何写博客呢又或者修改博客Bug？要是直接在github源码里写好文章后能自动编译发布就好了，好在github的好基友travis可以轻松帮我们同时实现这种持续集成, 持续部署。</p>
<h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>我的博客是基于<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>写的，最终发布地址是托管到Troy-Yang/troy-yang.github.io下的，为了方便，我把源码放在他的一个source分支下，以前要写一篇博客的做法是：</p>
<ol>
<li>获取Source分支，使用markdown写好文章放在指定目录</li>
<li>安装搭建hexo环境</li>
<li>使用Node编译这个hexo项目</li>
<li>使用Node发布编译后的结果到github上</li>
</ol>
<p>缺点显而易见，我必须要搭建hexo的环境，并且还需要获取到source源码，而我只是想写一个markdown啊或者修改博客里某个css文件的bug，所以最理想的做法就是能自动检测到我的源码改动并自动编译部署，就和我们平时项目开发时的CI、CD一样。</p>
<h2 id="Travis"><a href="#Travis" class="headerlink" title="Travis"></a><a href="https://travis-ci.org/" target="_blank" rel="external">Travis</a></h2><p>不想介绍太多它，只想提一点的是它只针对开源项目免费，并且和github上的项目集成，所以所有github上的项目都可以使用它做CI、CD。</p>
<blockquote>
<p>这也就是为什么我们看到很多github上的项目都有.travis.yml文件<br>和任何CI服务器一样，它的作用就在于可以捕捉任何代码提交并自动化的编译部署项目。</p>
</blockquote>
<h2 id="第一步，github上添加access-token"><a href="#第一步，github上添加access-token" class="headerlink" title="第一步，github上添加access token"></a>第一步，github上添加access token</h2><p>登录github，进入到setting =&gt; develop setting =&gt; personal access tokens</p>
<p>在description里输入任意token 名字，比如Travis-CI，并勾选上下面所有复选框。这个时候会生成token，请务必记住，因为他只会出现一次，否则需要重新生成(这个就是)。</p>
<p><img src="https://images.troyyang.com/2017-6-24-github-create-token.png" alt="image"></p>
<h2 id="第二步，添加github上的项目至travis上"><a href="#第二步，添加github上的项目至travis上" class="headerlink" title="第二步，添加github上的项目至travis上"></a>第二步，添加github上的项目至travis上</h2><p>使用github账号登录<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a>，这个时候你会看到自己所有github上的项目，选择需要做自动集成的项目troy-yang.github.io</p>
<p><img src="https://images.troyyang.com/2017-6-24-travis-ci-create.png" alt="image"></p>
<h2 id="第三步-添加access-token到travis上"><a href="#第三步-添加access-token到travis上" class="headerlink" title="第三步, 添加access token到travis上"></a>第三步, 添加access token到travis上</h2><p>第一步和第三步的目的是保护你的access token除了travis和你自己以外别人都看不到，你肯定不希望把access token放在.travis.yml文件里让大家都看到吧。</p>
<p>在travis上进入troy-yang.github.io 后，在右上角more options里找到setting，打开后，勾选 [Build only if .travis.yml is present] 并且 在Environment Variables中添加github上的access token。</p>
<p><img src="https://images.troyyang.com/2017-6-24-travis-ci-setting.png" alt="image"></p>
<h2 id="第四步-添加编写-travis-yml"><a href="#第四步-添加编写-travis-yml" class="headerlink" title="第四步,　添加编写.travis.yml"></a>第四步,　添加编写.travis.yml</h2><p>在项目源码根目录(我的是troy-yang.github.io source分支), 添加.travis.yml文件，内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">language: node_js</div><div class="line">node_js: stable</div><div class="line"></div><div class="line"># S: Build Lifecycle</div><div class="line">install:</div><div class="line">  - npm install</div><div class="line"></div><div class="line">before_install:</div><div class="line">  - git submodule update --init --remote --recursive</div><div class="line">  </div><div class="line">#before_script:</div><div class="line"> # - npm install -g gulp</div><div class="line"></div><div class="line">script:</div><div class="line">  - hexo g</div><div class="line"></div><div class="line">after_script:</div><div class="line">  - cd ./public</div><div class="line">  - git init</div><div class="line">  - git config user.name &quot;troyyang&quot;</div><div class="line">  - git config user.email &quot;yangzhouemail@163.com&quot;</div><div class="line">  - git add .</div><div class="line">  - git commit -m &quot;Update docs&quot;</div><div class="line">  - git push --force --quiet &quot;https://$&#123;GitHub_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</div><div class="line"># E: Build LifeCycle</div><div class="line"></div><div class="line">branches:</div><div class="line">  only:</div><div class="line">    - Source</div><div class="line">env:</div><div class="line"> global:</div><div class="line">   - GH_REF: github.com/Troy-Yang/troy-yang.github.io.git</div></pre></td></tr></table></figure></p>
<p>里面最重要的可能就是执行脚本和变量，脚本。 其中hexo g是编译hexo 项目命令，after_script是编译命令完成后将结果推送至github项目下。${GitHub_TOKEN} 和 ${GH_REF}是两个占位符，第一个就是我们在Travis项目下添加的Token，会在travis执行的时候自动替换，第二个就是下面env的一个变量，这里我们也可以不要这个变量直接放地址也可以。还有一点的是branch指定，我们这里只需要Source 分支。</p>
<p>根据不同项目，travis.yml文件内容各有不同, Travis上的一个官方demo文件<a href="https://github.com/travis-ci/cat-party/blob/master/.travis.yml" target="_blank" rel="external">.travis.yml</a></p>
<h2 id="第五步，测试"><a href="#第五步，测试" class="headerlink" title="第五步，测试"></a>第五步，测试</h2><p>让我们试试直接浏览器登录github，然后在troy-yang.github.io.git下的source分支下提交任何文件修改。在登录Travis，此时你可以看到一旦提交，Travis这边马上开始执行流程，看起来非常赏心悦目。</p>
<p><img src="https://images.troyyang.com/2017-6-24-travis-ci-build.png" alt="image"></p>
<p>从此发布文件，修改博客bug是如此容易！博客如此，其他开源项目同样如此。</p>
]]></content>
    
    <summary type="html">
    
      在使用Hexo写完一篇博客后，都需要手动在本地编译，并生成静态文件，最后在上传至github服务器上才能发布，繁琐步骤姑且不说，万一哪天换了台电脑，没有Hexo环境的时候如何写博客呢？要是直接在github源码里写好文章后能自动编译发布就好了，好在github的好基友travis可以轻松帮我们同时实现这种CI,CD。
    
    </summary>
    
      <category term="笔记" scheme="http://troyyang.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="github" scheme="http://troyyang.com/tags/github/"/>
    
      <category term="travis-ci" scheme="http://troyyang.com/tags/travis-ci/"/>
    
      <category term="hexo" scheme="http://troyyang.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>踩过的坑--CORS跨域请求中预检(preflight)</title>
    <link href="http://troyyang.com/2017/06/06/Express_Cors_Preflight_Request/"/>
    <id>http://troyyang.com/2017/06/06/Express_Cors_Preflight_Request/</id>
    <published>2017-06-06T19:59:22.000Z</published>
    <updated>2017-07-22T09:36:31.617Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h3><p>这两天在使用NodeJS Express搭建REST服务器时遇到一个很典型的AJAX跨域包含自定义请求头问题（用于身份验证），在花了大半天时间排查问题后发现自己对CORS真正的理解还很不够，尤其是pre-flight。</p>
<h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>服务端使用NodeJS Express搭建包含JWT身份验证的REST Full API， 客户端在获取到JWT信息之后的每次API请求头中都附带上JWT信息，完成身份验证后才能执行API操作，否则返回401错误。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>服务器端(CORS核心部分):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">------ App -----</div><div class="line">...</div><div class="line">// Enable CORS from client-side</div><div class="line">app.use(function (req, res, next) &#123;</div><div class="line">  res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</div><div class="line">  res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT, GET, POST, DELETE, OPTIONS&quot;);</div><div class="line">  res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, Authorization, Access-Control-Allow-Credentials&quot;);</div><div class="line">  res.header(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</div><div class="line">  next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//parse application/json and look for raw text                                        </div><div class="line">app.use(bodyParser.json());</div><div class="line">app.use(bodyParser.urlencoded(&#123; extended: true &#125;));</div><div class="line">app.use(bodyParser.text());</div><div class="line">app.use(bodyParser.json(&#123; type: &apos;application/json&apos; &#125;));</div><div class="line"></div><div class="line">// Routes configuration</div><div class="line">apiRoutes(app);</div><div class="line"></div><div class="line">app.listen(port);</div><div class="line"></div><div class="line">------- User -----</div><div class="line">//==========================</div><div class="line">// User Routes</div><div class="line">//==========================</div><div class="line">apiRoutes.use(&apos;/user&apos;, passport.authenticate(&apos;jwt&apos;, &#123;session: false &#125;), userRoutes);</div><div class="line">userRoutes.get(&apos;/&apos;, user.getUsers);</div><div class="line">userRoutes.get(&apos;/:id&apos;, user.getUser);</div><div class="line">userRoutes.post(&apos;/&apos;, user.postUser);</div><div class="line">userRoutes.put(&apos;/:id&apos;, user.updateUser);</div><div class="line">userRoutes.delete(&apos;/:id&apos;, user.deleteUser);</div></pre></td></tr></table></figure>
<p>上面的代码看起来还是那么多清晰，在PostMan 测试中附带jwt也是没有任何的问题，成功返回。<br><img src="https://images.troyyang.com/2017-06-05-CORS-Postman.PNG" alt="image"></p>
<p>接下来是客户端(jquery ajax):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">------- Core --------</div><div class="line">function BaseManager(auth) &#123;</div><div class="line">    this.baseApiUrl = &apos;http://localhost:8080/api/&apos;;</div><div class="line">    this.auth = auth;</div><div class="line">&#125;</div><div class="line">BaseManager.prototype.get = function (url, successCallback, errorCallback) &#123;</div><div class="line">    this.ajax(url, &#123;&#125;, &apos;get&apos;, successCallback, errorCallback);</div><div class="line">&#125;</div><div class="line">BaseManager.prototype.ajax = function (url, data, type, successCallback, errorCallback) &#123;</div><div class="line">    let that = this;</div><div class="line">    $.ajax(&#123;</div><div class="line">        url: url,</div><div class="line">        method: type,</div><div class="line">        data: data,</div><div class="line">        beforeSend: function (req) &#123;</div><div class="line">            req.setRequestHeader(&apos;Authorization&apos;, that.auth.authorizationToken);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">        .done(successCallback)</div><div class="line">        .fail(errorCallback);</div><div class="line">&#125;</div><div class="line">----------- User -------</div><div class="line">User.prototype.getUserById = function (id, successCallback, errorCallback) &#123;</div><div class="line">    let url = this.baseApiUrl + &apos;/user/&apos; + id;</div><div class="line">    this.get(url, successCallback, errorCallback);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="永远的401"><a href="#永远的401" class="headerlink" title="永远的401"></a>永远的401</h3><p>然后， 问题出现了，尽管参数是如何的对，Chrome console下总是返回让人咬牙切齿的大红色401，甚至断点都没有进入到passport的Jwt middleware下。<br><img src="https://images.troyyang.com/2017-06-05-401-error.PNG" alt="image"></p>
<p>无数次的尝试，先是怀疑客户端ajax调用没对，甚至搬用最原生的ajax方法， 也怀疑过是服务端Jwt passport没写对，最后比较http请求头的时候发现了一些问题。</p>
<p>使用Post man在node服务器端得到的request是这样的：</p>
<p><img src="https://images.troyyang.com/2017-06-05-request-header-postman.PNG" alt="image"></p>
<p>通过浏览器ajax请求是这样的：<br><img src="https://images.troyyang.com/2017-06-05-request-header-browser.PNG" alt="image"></p>
<p>有人给我把请求头信息更改了！Authorization不见了，甚至连req.method都变成了OPTIONS，而不是GET。</p>
<h3 id="罪魁祸首—预检-Pre-flight"><a href="#罪魁祸首—预检-Pre-flight" class="headerlink" title="罪魁祸首—预检(Pre-flight)"></a>罪魁祸首—预检(Pre-flight)</h3><p>百思不得其解，Google相关关键词后，pre-flight浮出水面，到了这步，突然想起阮一峰的《<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a>》，当时只是略读，大概了解CORS中有两种请求：简单请求和非简单请求。于是又翻出来看了下，此时的情况正是属于非简单请求，会发送两次的请求，第一次就是preflight，用于请求验证, 第二次才是用户真正需要发送的请求。</p>
<p>对于Pre-flight权威的解读： <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests" target="_blank" rel="external">mozilla.org</a></p>
<p>回到代码中，不巧，每次服务端捕捉到的就是这个preflight请求，然后做next，其中就包括Jwt 中间件，而因为请求头中没有Authorization这个header，Jwt就返回了401，而这个过程是在passport的JWT中自动检测的，自己写的JWT验证部分甚至都没有执行到！</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>看了<a href="https://github.com/expressjs/cors/blob/master/lib/index.js" target="_blank" rel="external">express cors</a>源码后，其实把请求类型OPTIONS做个简单的过滤就好啦！！！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Enable CORS from client-side</div><div class="line">app.use(function (req, res, next) &#123;</div><div class="line">  res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</div><div class="line">  res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT, GET, POST, DELETE, OPTIONS&quot;);</div><div class="line">  res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, Authorization, Access-Control-Allow-Credentials&quot;);</div><div class="line">  res.header(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</div><div class="line">  if (req.method == &quot;OPTIONS&quot;) &#123;</div><div class="line">    res.send(200);</div><div class="line">  &#125;</div><div class="line">  else &#123;</div><div class="line">    next();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>又想了一下为什么之前的项目一直没有这个问题，其实是因为很多框架以及帮我们实现好了，比如说.NET中的WebAPI, 在做验证的时候我们都不用去考虑需要捕捉pre-flight请求，而在express中，甚至如果我当初直接使用三方库<a href="https://github.com/expressjs/cors/blob/master/lib/index.js" target="_blank" rel="external">express cors</a> 也可以避免，但是幸运的是，因为这种偶然，我们更有机会看得更清楚这些请求的后面到底是什么。</p>
<p>看似简单的问题，却包括了很多需要自己去了解的东西，尤其是http各种请求头的含义，比如Content-type, Accept, 以及对应ajax应该传递的参数，最后，当然还有 Pre-flight!</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;开头&quot;&gt;&lt;a href=&quot;#开头&quot; class=&quot;headerlink&quot; title=&quot;开头&quot;&gt;&lt;/a&gt;开头&lt;/h3&gt;&lt;p&gt;这两天在使用NodeJS Express搭建REST服务器时遇到一个很典型的AJAX跨域包含自定义请求头问题（用于身份验证），在花
    
    </summary>
    
      <category term="Web前端" scheme="http://troyyang.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="NodeJs" scheme="http://troyyang.com/categories/Web%E5%89%8D%E7%AB%AF/NodeJs/"/>
    
      <category term="笔记" scheme="http://troyyang.com/categories/Web%E5%89%8D%E7%AB%AF/NodeJs/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="http" scheme="http://troyyang.com/tags/http/"/>
    
      <category term="cors" scheme="http://troyyang.com/tags/cors/"/>
    
      <category term="ajax" scheme="http://troyyang.com/tags/ajax/"/>
    
      <category term="express" scheme="http://troyyang.com/tags/express/"/>
    
      <category term="jwt" scheme="http://troyyang.com/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>给Github自定义域名加上HTTPS</title>
    <link href="http://troyyang.com/2017/05/21/Add_Free_Certification_In_Blog_Step_By_Step/"/>
    <id>http://troyyang.com/2017/05/21/Add_Free_Certification_In_Blog_Step_By_Step/</id>
    <published>2017-05-21T15:59:22.000Z</published>
    <updated>2017-07-22T09:36:31.617Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h3><p>随着Https越来越成为一种趋势，最近也给自己家博客弄上了高大上的https，主要是结合使用的cloudflare和七牛云（图床）使用，关键是免费！所以想把这个过程记录下来，万一有人用得到呢。(还想抽空写写对Https的原理的理解，主要目的还是总结前段时间自己对Https的学习。)</p>
<h3 id="Https时代"><a href="#Https时代" class="headerlink" title="Https时代"></a>Https时代</h3><blockquote>
<p>According to Mozilla since January 2017 more than half of the Web traffic is encrypted. <a href="https://en.wikipedia.org/wiki/HTTPS" target="_blank" rel="external">wiki pedia</a> </p>
</blockquote>
<p>维基百科告诉我们，自从2017年1月，超过一半的网络请求是通过加密过后的。百度也告诉站长们：</p>
<blockquote>
<p>为了给用户提供一个安全可靠的网络环境，继启用https加密之后，百度搜索再次重磅推出：全面支持https页面直接收录；另外从相关性的角度，百度搜索引擎认为权值相同的站点，采用https协议的页面更加安全，排名上会优先对待。<a href="http://zhanzhang.baidu.com/wiki/392" target="_blank" rel="external">百度站长</a></p>
</blockquote>
<p>Google 今年更厉害，从1月份开始，所有没有用Https的网站会在Chrome浏览器地址栏前面加上不安全的图标：</p>
<blockquote>
<p>Beginning in January 2017 (Chrome 56), we’ll mark HTTP pages that collect passwords or credit cards as non-secure, as part of a long-term plan to mark all HTTP sites as non-secure. <a href="https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html" target="_blank" rel="external">Google</a></p>
</blockquote>
<p>百度2015年实现全站HTTPS，并且Google和百度都收录Https的网站并且提高其搜索排名，国外大型互联网网站基本都使用https，所以，有人说2017年是一个Https年。那既然如此，高大上的Https我们普通老百姓玩得起吗？要知道，一般的Https证书动辄也是几千块一年！</p>
<h3 id="天上掉下个证书"><a href="#天上掉下个证书" class="headerlink" title="天上掉下个证书"></a>天上掉下个证书</h3><p>没错，Cloudflare免费提供给证书，尽管你没有自己的服务器。Cloudflare是一个相当厉害的DNS服务商和CDN提供商，提供各种安全防范解决方案，全世界各地都有他的节点，对于国内，百度选择和他一起合作就是个很好的栗子，所以不用担心国内解析速度。所以我准备把主站的证书使用Cloudflare提供的。</p>
<p>再一个就是七牛云，作为博客，不可能把文章图片全都放github上，所以最好还是要有自己的图床，但是好多图片床都是不支持https的，好在七牛可以免费申请证书。所以这是第二个证书。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>因为自己的博客站点暂时是托管到github上的，不是自己的服务器，所以并不能使用<a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s encrypt</a>在服务器端生成免费的证书，但好在一切都有cloudflare!</p>
<ul>
<li><del>有一个自己的域名</del>（废话）</li>
<li>自己的Github博客地址 (一般都是<a href="https://[username].github.io" target="_blank" rel="external">https://[username].github.io</a>)</li>
<li>注册Cloudflare</li>
<li>注册七牛云 （如果有自己的图片床，并支持https, 可省去）</li>
</ul>
<p>Cloudflare，主要用于域名解析，这是成功的关键！只有在他那里域名解析，他才能为我们提供多种证书服务。</p>
<h3 id="开始第一步-Github-自定义域名"><a href="#开始第一步-Github-自定义域名" class="headerlink" title="开始第一步: Github 自定义域名"></a>开始第一步: Github 自定义域名</h3><p>我们知道Github可以托管开源和私自项目(私有收费)，同样，功能强大的Github也可以提供静态页面站点，默认站点是 <strong><a href="https://[username].github.io" target="_blank" rel="external">https://[username].github.io</a></strong> ，对应的站点代码是在reponsitory名为[username].github.io 下，如果没有，请创建自己的默认repository，可参考官方<a href="https://pages.github.com/" target="_blank" rel="external">说明</a></p>
<p><img src="https://images.troyyang.com/2017-5-21-https-github-home.png" alt="image"><br>创建成功后，我们就成功的创建了自己的个人站点: <a href="https://troyyang.github.io" target="_blank" rel="external">https://troyyang.github.io</a> 显然这还不是我们的最终目的。</p>
<p>接下来，打开这个repository, 定位到repo setting，绑定自己的域名，绑定完成后，我们可以看到repo代码下新加了一个CNAME的文件，换句话说，其实我们也可以直接在repo中直接添加这个文件即可，而不需要在setting中去手动设置，这个在我们静态站点发布的时候非常有用，因为每次发布后提交都会删除原有的文件，所以我们就可以在生成的文件中默认加上这个文件。</p>
<p><img src="https://images.troyyang.com/2017-5-21-https-github-home-customdomain.png" alt="image"></p>
<p>CNAME<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">troyyang.com</div></pre></td></tr></table></figure></p>
<h3 id="第二步：使用Cloudflare解析域名"><a href="#第二步：使用Cloudflare解析域名" class="headerlink" title="第二步：使用Cloudflare解析域名"></a>第二步：使用Cloudflare解析域名</h3><h4 id="修改默认DNS服务器"><a href="#修改默认DNS服务器" class="headerlink" title="修改默认DNS服务器"></a>修改默认DNS服务器</h4><p>在使用Cloudflare之前，我使用的是万网（现在是阿里云）的默认DNS服务器，也就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dns9.hichina.com</div><div class="line">dns10.hichina.com</div></pre></td></tr></table></figure></p>
<p>现在修改为Cloudflare<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apollo.ns.cloudflare.com</div><div class="line">mary.ns.cloudflare.com</div></pre></td></tr></table></figure></p>
<p>个人觉得cloudflare作为DNS服务器特别快，修改了任何A记录或者其他记录会马上生效，不用再等待几个小时。</p>
<h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>登录cloudflare, 将域名A记录指向Github服务器地址(同时也可指定CNAME记录去加上www)，绑定完成几分钟后访问troyyang.com或者www.troyyang.com 就可以访问到我们Github上那个默认的repo静态站点。这个时候可以尝试去访问<a href="https://troyyang.com">https://troyyang.com</a> 理论上是不会成功的，哈哈。<br><img src="https://images.troyyang.com/2017-5-21-dns-cloudflare.png" alt="image"></p>
<h3 id="第三步：使用Cloudflare的-Universal-SSL-证书"><a href="#第三步：使用Cloudflare的-Universal-SSL-证书" class="headerlink" title="第三步：使用Cloudflare的 Universal SSL 证书"></a>第三步：使用Cloudflare的 Universal SSL 证书</h3><p>在Cloudflare管理页面，导航到Crypto，我们会看到SSL在Cloudflare上使用证书有三种方式: Flexible、Full、Full Strict，</p>
<ul>
<li>Flexible SSL: 在访客与Cloudflare之间是加密的，从Cloudflare到自己服务器是不加密的，所以</li>
</ul>
<ol>
<li>你不需要在站点服务器上安装任何证书。</li>
<li>访客可以在浏览器地址栏上看到加密的图标。（证书签名来自Cloudflare）</li>
</ol>
<ul>
<li>Full SSL: 从访客到Cloudflare, 从Cloudflare到站点服务器都是加密的。Full 和 Full (Strict)不同之处在于Full Strict会去验证你服务器上的证书是否合法，而Full不会验证，所以你可以在你服务器上安装任何证书，包括自签名证书也是可以的。当然</li>
</ul>
<ol>
<li>访客可以在浏览器地址栏上看到加密的图标。（证书签名来自Cloudflare）</li>
</ol>
<ul>
<li>Full SSL (strict): 从访客到Cloudflare, 从Cloudflare到站点服务器都是加密的。你必须在你的服务器上安装有可信赖的CA证书，这个证书必须是未过期，包含有域名等信息的。同样</li>
</ul>
<ol>
<li>访客可以在浏览器地址栏上看到加密的图标。（证书签名来自自己申请的CA）</li>
</ol>
<p>三种模式如图<br><img src="https://images.troyyang.com/2017-5-21-cloudflare-ssl.png" alt="image"></p>
<p>当然，我们选择Flexible，选择后我们还需要在下面的Edge Certificates栏目中新增Universal SSL 证书（当初以为选择Flexible后就等待24小时激活就完了，可几天过去了状态一直处于initilizing certification, 问了客服后，客服帮我加上这个Universal SSL证书就好了，给他们客服赞一个）</p>
<p>在Edge Certificates中，点击Order SSL Certificate按钮，弹出几种证书，我们当然选择免费的那个, 然后填写证书服务的域名troyyang.com和*.troyyang.com.</p>
<p><img src="https://images.troyyang.com/2017-5-21-cloudflare-universal-ssl.png" alt="image"></p>
<p>一步一步完成后就等待了，一般情况不会超过24小时就会生效，激活后就如下图（我个人选的是Full），然后就可以尽情的访问 <a href="https://troyyang.com">https://troyyang.com</a></p>
<p><img src="https://images.troyyang.com/2017-5-21-cloudflare-universal-ssl-success.png" alt="image"></p>
<p>如何你查看域名证书，细心的你除了看到Cloudflare签发的证书外，还有证书有效期只有半年，这个不用担心过期，客服小哥回复说他们会在快过期时自动延期的。</p>
<p><img src="https://images.troyyang.com/2017-5-21-cloudflare-ssl-troyyang.png" alt="image"></p>
<h3 id="七牛图床Https支持"><a href="#七牛图床Https支持" class="headerlink" title="七牛图床Https支持"></a>七牛图床Https支持</h3><p>Cloudflare客服小哥在帮我加好Universal SSL证书后，回复我说你网站还包括非https的内容也就导致所谓的mixed-content 问题，也就导致我当时在地址栏还看不到那个https图标，这个是我能想到的，因为我知道我的图片还都不是https，因为图片存放在七牛云上的，赶紧回去看看七牛是怎么支持https，于是在踩了无数坑过后终于让图片支持上了。</p>
<h4 id="第一步：-在七牛上使用自定义域名-images-troyyang-com"><a href="#第一步：-在七牛上使用自定义域名-images-troyyang-com" class="headerlink" title="第一步： 在七牛上使用自定义域名 (images.troyyang.com)"></a>第一步： 在七牛上使用自定义域名 (images.troyyang.com)</h4><p>要使用https图床，必须得使用自定义域名（我使用的是images.troyyang.com），这个比较简单，可以参考<a href="https://developer.qiniu.com/fusion/manual/1367/custom-domain-name-binding-process" target="_blank" rel="external">页面</a>，我们可以先不选择https模式，让正常http先工作。主要工作就是在Cloudflare上新增一个CNAME记录指向七牛为自己域名生成的域名地址就好了。一切正常后，我们应该可以访问任意图片比如<a href="http://images.troyyang.com/2017-05-01-hexo-2015-wordpress.jpg" target="_blank" rel="external">http://images.troyyang.com/2017-05-01-hexo-2015-wordpress.jpg</a></p>
<p>要使用自定义域名，在七牛上，你必须等往账号里充至少10元，让自己成为标准用户，</p>
<h4 id="第二步：-给自定义域名加上https支持"><a href="#第二步：-给自定义域名加上https支持" class="headerlink" title="第二步： 给自定义域名加上https支持"></a>第二步： 给自定义域名加上https支持</h4><p>现在要给自己的自定义图片域名加上https支持，在七牛上有两种方式，一种是上传自己已有的证书，第二种是申请免费证书或者购买证书。对于第一种，除了上传自己的证书公钥以外，还需要私钥也一同上传，所以我还是选择的第二种，反正也只是一个二级域名的证书，也并不存在任何私密性的东西。</p>
<p>在七牛管理页面，在证书页面选择购买证书，然后选择TrustAsia的DV限免性，最关键的就是DNS的TXT验证了（<a href="https://developer.qiniu.com/fusion/manual/1703/qiniu-free-certificate" target="_blank" rel="external">验证指南</a>），我也是在使用了三次申请后才弄明白申请失败原因: Github上默认会解析出两个IP地址</p>
<p><img src="https://images.troyyang.com/2017-5-21-qiniu-dig.png" alt="image"></p>
<p>解决方案就是，在Cloudflare上先删除所有A记录，CNAME记录，先添加上用作域名验证的Txt记录，等证书申请成功后（大约十几分钟），在恢复A记录，CNAME记录。这个是我Cloudflare上的相关解析最终样子<br><img src="https://images.troyyang.com/2017-5-21-cloudflare-dns-all.png" alt="image"></p>
<p>有一点需要说明的是在七牛上如果只使用http的话，只要一个月不超过20G流量，是不会收费的，但是https是不在免费额度里面的。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;写在开头&quot;&gt;&lt;a href=&quot;#写在开头&quot; class=&quot;headerlink&quot; title=&quot;写在开头&quot;&gt;&lt;/a&gt;写在开头&lt;/h3&gt;&lt;p&gt;随着Https越来越成为一种趋势，最近也给自己家博客弄上了高大上的https，主要是结合使用的cloudflare
    
    </summary>
    
      <category term="security" scheme="http://troyyang.com/categories/security/"/>
    
    
      <category term="https" scheme="http://troyyang.com/tags/https/"/>
    
      <category term="github" scheme="http://troyyang.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>《CSS设计指南》笔记</title>
    <link href="http://troyyang.com/2017/04/20/Learn_Stylin_With_Css/"/>
    <id>http://troyyang.com/2017/04/20/Learn_Stylin_With_Css/</id>
    <published>2017-04-20T22:28:36.000Z</published>
    <updated>2017-07-22T09:36:31.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul>
<li>子元素 &gt; :  用于选择所有给定子元素，如 .food&gt;li</li>
<li>后代元素： 用于选择所有子代和后代元素，如 .food li</li>
<li><p>子-星 &gt; *：用于选择所有直接子元素，而不包括后代元素. 注意：在为子元素设定垂直外边距时，只能使用 margin-top 和 margin-bottom，不能使用简写的 margin，否则会抵消用“子-星选择符”应用给这些元素 的水平外边距，如果你想进一步缩进某个子元素的内容，就应该给该子元素应用内边距如让子元素与栏边界保持一定距离</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">article &gt; * &#123;margin:0 20px;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>非首位子元素 + : 这个选择符会选择除第一个之外的所有指定元 素，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.list1 li + li &#123;border-top:1px solid #f00;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul>
<li>box-sizing:border-box 可用于避免改变内边距（边框）时导致整个盒子尺寸变化(width此时只是代表内容的宽度)，</li>
<li>.Inner 另一种解决盒子尺寸变化的方式就是在其内部再包一层盒子</li>
</ul>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul>
<li>使用table-cell 布局(css3)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nav &#123;display:table-cell; width:150px; padding:10px;      background:#dcd9c0;&#125; </div><div class="line">article &#123;display:table-cell; padding:10px 20px;      background:#ffed53;&#125; </div><div class="line">aside &#123;display:table-cell; width:210px; padding:10px;      background:#3f7ccf;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h2><ul>
<li>将行内元素改为块级元素实现文本选择范围扩大<br>如，导航栏中文本<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.list1 a &#123;display:block; padding:3px 10px; textdecoration:           none; font:20px Exo, helvetica, arial, sansserif;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="font"><a href="#font" class="headerlink" title="font"></a>font</h2><ul>
<li>常用颜色<br><img src="https://images.troyyang.com/2017-6-1-regular-colors.PNG" alt="image"></li>
</ul>
<h2 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h2><p>借助<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip/" target="_blank" rel="external">background-clip</a>可以实现类似外边距分割效果，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">.multi-drop-menu ul &#123;</div><div class="line">    float: left;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.multi-drop-menu li &#123;</div><div class="line">    float: left;</div><div class="line">    list-style-type: none;</div><div class="line">&#125;</div><div class="line">.multi-drop-menu a &#123;</div><div class="line">    display: block;</div><div class="line">    color: #555;</div><div class="line">    background-color: #eee;</div><div class="line">    padding: .2em 1em;</div><div class="line">    border-width: 3px;</div><div class="line">    border-color: transparent;</div><div class="line">&#125;</div><div class="line">.multi-drop-menu li a &#123;</div><div class="line">    display: block;</div><div class="line">    border-right-style: solid;</div><div class="line">    background-clip: padding-box;</div><div class="line">    text-decoration: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;nav class=&quot;multi-drop-menu vertical&quot;&gt;</div><div class="line">	&lt;ul&gt;</div><div class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Shirts&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Pants&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Dresses&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Shoes&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/nav&gt;</div></pre></td></tr></table></figure></p>
<p>类似的用途如facebook的弹出框</p>
<p><img src="https://www.w3cplus.com/sites/default/files/facebook-effects.jpg" alt="image"></p>
<blockquote>
<p>使用background-clip把元素背景控制在padding或content区域内，这样一来，只需一个非常div，我们在这个div上加上透明边框，并配合background-clip把背景超过padding或content的边缘外的背景色直接裁剪掉著作权归作者所有。<br>商业转载请联系作者获得授权,非商业转载请注明出处。<br>原文: <a href="http://www.w3cplus.com/content/css3-background-clip" target="_blank" rel="external">http://www.w3cplus.com/content/css3-background-clip</a> © w3cplus.com</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;子元素 &amp;gt; :  用于选择所有给定子元素，如 .food&amp;gt;li&lt;/li&gt;
&lt;li&gt;后代元素： 用于选择所有子
    
    </summary>
    
      <category term="web前端" scheme="http://troyyang.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="http://troyyang.com/categories/web%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://troyyang.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://troyyang.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>小米路由器 安装 Shadowsocks 客户端</title>
    <link href="http://troyyang.com/2017/04/16/XiaoMi_Router_Install_Shadowsocks/"/>
    <id>http://troyyang.com/2017/04/16/XiaoMi_Router_Install_Shadowsocks/</id>
    <published>2017-04-16T11:10:00.000Z</published>
    <updated>2017-07-22T09:36:31.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h3><p>当然是为了省去多个终端连接的烦恼，而我的直接原因确是为了Google神器Chromecast能正常使用（就单单是电视投射功能就足以让我心动）。大半年前在美国买了一个Chromecast，在美国的时候工作的好好的，回国后确怎么也投射不了，总是找不到设备，大概猜到是因为被墙的原因，可惜电脑挂起了VPN还是不行，后来才知道是电视也需要连接Google 服务！坑爹啊！然后就一直静静的放着放着直到这次买了个服务器(也是为了科学上网)后，想试试让路由器直接连Shadowsocks。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li>一台运行着Shadowsocks，并且能访问外网的服务器</li>
<li>一台小米MINI路由器（其他的也行）</li>
<li>一台装载了linux远程连接客户端的电脑(XShell或者Putty)</li>
</ul>
<h3 id="第一步：开启路由器SSH"><a href="#第一步：开启路由器SSH" class="headerlink" title="第一步：开启路由器SSH"></a>第一步：开启路由器SSH</h3><p>我的是小米MINI路由器，因为默认是稳定版而不是开发版，所以第一步就是升级（也可能是降级）到开发版去开启SSH，具体步骤在<a href="http://jingyan.baidu.com/article/624e7459ae65e834e8ba5afd.html" target="_blank" rel="external">这里</a>或者 <a href="http://bbs.xiaomi.cn/t-10044297" target="_blank" rel="external">这里</a></p>
<blockquote>
<p>升级前可以先备份路由信息</p>
</blockquote>
<h3 id="第二步：连接到路由器"><a href="#第二步：连接到路由器" class="headerlink" title="第二步：连接到路由器"></a>第二步：连接到路由器</h3><p>升级完成后，使用在小米官网给出当前小米账号的root账号密码便可以登录路由器系统XIAO QIANG, 实质也是linux系统的一个distribution，查询后得知事实上生活中很多小的硬件设备都是搭载的linux系统，因为其开销实在太小啦<br>![image]<a href="https://images.troyyang.com/2017-04-15-LoginXiaoMiRouter.PNG" target="_blank" rel="external">https://images.troyyang.com/2017-04-15-LoginXiaoMiRouter.PNG</a>)</p>
<p>查询当前路由器系统信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">uname -a</div><div class="line">/// Linux XiaoQiang 2.6.36 #1 MiWiFi-R1CM-2.15.75 Thu Apr 13 17:10:07 CST 2017 mips GNU/Li</div></pre></td></tr></table></figure>
<h3 id="第三部：安装Shadowsocks"><a href="#第三部：安装Shadowsocks" class="headerlink" title="第三部：安装Shadowsocks"></a>第三部：安装Shadowsocks</h3><p>原本以为这个shadowsocks客户端其实就是github上的那个Linux Shadowsocks, 然后似乎并不是，只能猜测针对当前路由器又做过一次包装, 然后就发现了这么一个宝藏一键安装脚本：<a href="http://d.ukoi.net/Miwifi/" target="_blank" rel="external">http://d.ukoi.net/Miwifi/</a> </p>
<p>也不知道作者是谁，只能猜测是对小米路由器系统很了解的人，所以根据这些安装脚本，我们就可以一步一步走向世界！之前试过很多小米论坛上的脚本，可惜基本都是不能下载的，所以很感激这位作者。</p>
<p>运行下面的脚本:</p>
<blockquote>
<p>可以根据不同的小米路由器版本选择不同的脚本，更改相应的部分</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// userdisk目录下的文件不会被系统reset</div><div class="line">cd /userdisk</div><div class="line">// 下载</div><div class="line">wget http://d.ukoi.net/Miwifi/MINI/mini_install.sh</div><div class="line">// 对文件赋权限</div><div class="line">chmod +x mini_install.sh</div><div class="line">// 安装</div><div class="line">sh mini_install.sh</div></pre></td></tr></table></figure>
<p>之后就是按照输入要求输入客户端连接的一些参数，完成后不出意外基本没问题啦，家里面所有wifi覆盖的地方都能愉快的科学上网，当然最重要的就是我的电视也能投射啦。。。。</p>
<p>还有一点就是这个脚本使用的是IP分流的，也就是说只有在GFW列表里的网站才会使用VPS，所以可以放心使用。</p>
<p>参考</p>
<p><a href="http://www.miui.com/forum.php?mod=viewthread&amp;tid=4133822&amp;extra=" target="_blank" rel="external">http://www.miui.com/forum.php?mod=viewthread&amp;tid=4133822&amp;extra=</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前因&quot;&gt;&lt;a href=&quot;#前因&quot; class=&quot;headerlink&quot; title=&quot;前因&quot;&gt;&lt;/a&gt;前因&lt;/h3&gt;&lt;p&gt;当然是为了省去多个终端连接的烦恼，而我的直接原因确是为了Google神器Chromecast能正常使用（就单单是电视投射功能就足以让我心动）
    
    </summary>
    
      <category term="Linux" scheme="http://troyyang.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://troyyang.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 安装 Shadowsocks 实现科学上网</title>
    <link href="http://troyyang.com/2017/03/26/Ubuntu_Install_ShadowSocks/"/>
    <id>http://troyyang.com/2017/03/26/Ubuntu_Install_ShadowSocks/</id>
    <published>2017-03-26T11:20:00.000Z</published>
    <updated>2017-07-22T09:36:31.617Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h3><p>看了shadowsocks的各种安装部署教程，因为对于linux不熟，所以遇到很多坑，自己留个笔记在这里</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>使用Ubuntu 14.04 版本已经不是必须的，当时主要是因为在最新版本Ubuntu内核没在锐速支持列表中，现在发现一种新的拥塞加速算法BBR（Google开发的），而且默认在最新的Ubuntu内核4.11已经集成进去，所以只需要开启即可，再也不用考虑已经不提供官方服务的锐速。完成安装ShadowSocks 后，参见秋水逸冰的《<a href="https://teddysun.com/489.html" target="_blank" rel="external">一键安装最新内核并开启 BBR 脚本</a>》。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>OS: </p>
<ul>
<li>Ubuntu 14.04 X64 LTS</li>
<li>Kernel Linux 3.13.0-112-generic</li>
</ul>
<blockquote>
<p>似乎 从16.04 开始以上已经全面使用<a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="external">systemd</a>来启动管理守护进程，而不是像传统在init.d来启动。</p>
</blockquote>
<p>VPS 平台: Vultr<br>远程控制客户端: XShell 或者 Putty</p>
<h3 id="远程连接-ubuntu"><a href="#远程连接-ubuntu" class="headerlink" title="远程连接 ubuntu"></a>远程连接 ubuntu</h3><p>略</p>
<h3 id="Shadowsocks-安装"><a href="#Shadowsocks-安装" class="headerlink" title="Shadowsocks 安装"></a>Shadowsocks 安装</h3><p>安装pytyon 的pip管理程序，因为shadowsocks是由python写的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install python-pip</div></pre></td></tr></table></figure></p>
<p>安装shadowsocks程序 (方式一)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install shadowsocks</div></pre></td></tr></table></figure>
<p>安装shadowsocks程序 (方式二), pip 上的不是最新版本)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 安装yum</div><div class="line"># 安装Python setuptools</div><div class="line">$ sudo apt-get install python-setuptools</div><div class="line"># 从github上安装shadowsocks</div><div class="line">$ pip install git+https://github.com/shadowsocks/shadowsocks.git@master</div></pre></td></tr></table></figure>
<p>查看是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssserver</div></pre></td></tr></table></figure>
<p>安装VIM<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt install vim</div></pre></td></tr></table></figure></p>
<p>创建服务器配置文件(多端口)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim  /etc/shadowsocks.json</div></pre></td></tr></table></figure>
<p>vim 的命令: 按 “i” 进入编辑模式，编辑后按 “esc” 退出编辑模式， 输入 “:wq” 保存退出vi<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;port_password&quot;: &#123;</div><div class="line">         &quot;443&quot;: &quot;password1&quot;,</div><div class="line">         &quot;8888&quot;: &quot;password2&quot;</div><div class="line">     &#125;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动服务，后台运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssserver -c /etc/shadowsocks.json -d start</div></pre></td></tr></table></figure>
<p>此时可配置好客户端shadowsocks检测是否可以访问</p>
<h3 id="设置开机启动-针对16-10以下版本"><a href="#设置开机启动-针对16-10以下版本" class="headerlink" title="设置开机启动(针对16.10以下版本)"></a>设置开机启动(针对16.10以下版本)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/rc.local</div></pre></td></tr></table></figure>
<p>在exit 0以前插入开机执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssserver -c /etc/shadowsocks.json -d start</div></pre></td></tr></table></figure>
<h3 id="ShadowSocks-操作命令"><a href="#ShadowSocks-操作命令" class="headerlink" title="ShadowSocks 操作命令"></a>ShadowSocks 操作命令</h3><p>查看日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo less /var/log/shadowsocks.log</div></pre></td></tr></table></figure>
<h3 id="锐速加速"><a href="#锐速加速" class="headerlink" title="锐速加速"></a><a href="https://github.com/91yun/serverspeeder/" target="_blank" rel="external">锐速加速</a></h3><p>一定要使用锐速加速，使用和不使用的差别是：没使用时查看youtube 720P 看不了，速度只有区区6、70KB的速度，使用后瞬间7、800甚至1m，发挥出了带宽的最大威力！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -N –no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</div></pre></td></tr></table></figure></p>
<h3 id="各种坑—列表"><a href="#各种坑—列表" class="headerlink" title="各种坑—列表"></a>各种坑—列表</h3><ul>
<li>使用Ubuntu 16.10 开机启动方式不同，网卡不同，锐速内核不支持</li>
<li>使用Ubuntu 16.4 锐速内核不支持</li>
<li>内核更换不成功！更换内核当然是为了使用锐速，试过了很多在锐速列表中支持的内核，可惜都提示类似错误 “Unable to locate package linux-image-extra-3.13.0-24-generic”</li>
<li>使用Ubuntu 14.4 rc.local 开机不执行</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;开头&quot;&gt;&lt;a href=&quot;#开头&quot; class=&quot;headerlink&quot; title=&quot;开头&quot;&gt;&lt;/a&gt;开头&lt;/h3&gt;&lt;p&gt;看了shadowsocks的各种安装部署教程，因为对于linux不熟，所以遇到很多坑，自己留个笔记在这里&lt;/p&gt;
&lt;h3 id=&quot;
    
    </summary>
    
      <category term="Linux" scheme="http://troyyang.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://troyyang.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>从wordpress主题中看CSS设计</title>
    <link href="http://troyyang.com/2017/03/11/Learn_CSS_from_wordpress_theme/"/>
    <id>http://troyyang.com/2017/03/11/Learn_CSS_from_wordpress_theme/</id>
    <published>2017-03-11T12:20:22.000Z</published>
    <updated>2017-07-22T09:36:31.617Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h3><p>最近想做个个人博客，看上了wordpress的<a href="https://wordpress.org/themes/twentyfifteen/" target="_blank" rel="external">twentyfifteen</a>模板页(2015默认模板)，看上了就想拥有，而拥有是需要付出代价的，于是就掉入了源码坑里，爬了一周才算勉强爬出来，回过头来觉得这个坑里还是有很多有营养的东西，毕竟是大公司，所有标准都是最新的，所以想总结下学到的东西，方便以后使用(持续更新中)</p>
<hr>
<h2 id="Responsive-page-干货都写在最前面"><a href="#Responsive-page-干货都写在最前面" class="headerlink" title="Responsive page (干货都写在最前面)"></a>Responsive page (干货都写在最前面)</h2><p>在移动互联网时代，responsive的页面是必须的，我们知道css3里的media 可以帮我们实现不同设备尺寸的不同显示方式，所以设备尺寸的一个界定值就是我们的一个首要考虑问题，其他不多说，看看人家是如何定义的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 16.1 Mobile Large 620px</div><div class="line"> */</div><div class="line"> @media screen and (min-width: 38.75rem) &#123;</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> * 16.2 Tablet Small 740px</div><div class="line"> */</div><div class="line"></div><div class="line">@media screen and (min-width: 46.25rem)&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 16.3 Tablet Large 880px</div><div class="line"> */</div><div class="line"> @media screen and (min-width: 55rem)&#123;&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 16.4 Desktop Small 955px</div><div class="line"> */</div><div class="line"> </div><div class="line">@media screen and (min-width: 59.6875rem)&#123;</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> * 16.5 Desktop Medium 1100px</div><div class="line"> */</div><div class="line"> </div><div class="line">@media screen and (min-width: 68.75rem)&#123;</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> * 16.6 Desktop Large 1240px</div><div class="line"> */</div><div class="line">@media screen and (min-width: 77.5rem)&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中在mock的过程中发现几个tips</p>
<ul>
<li>上面只有min-width，没有设置max-width，这是一个灵活的设计，没有max-width就说明他可以从最小满足条件的media开始，只要满足条件，都会被执行到，而我们需要做的就是把共有的部分写在最小尺寸里，或者放最外面，然后在需要更改的部分属性在在需要的尺寸中更改。简单举个栗子：<br>有个导航栏，需要在移动设备的时候隐藏，在桌面浏览器中显示所有，那我们可以这样:<br><img src="https://images.troyyang.com/2017-03-03-css-media-query.jpg" alt=""></li>
</ul>
<hr>
<h2 id="如何在css文件中使用fontawesome图标字体库"><a href="#如何在css文件中使用fontawesome图标字体库" class="headerlink" title="如何在css文件中使用fontawesome图标字体库"></a>如何在css文件中使用fontawesome图标字体库</h2><p>我们知道的是要在页面中使用fontawesome的图标很简单，只需要在html代码中加入如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;i class=&quot;fa fa-address-book-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;a href=&quot;#&quot;&gt;列表&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>其中fa代表的是默认图标大小，如果想改变图标的大小，可以使用集成的fa-lg(放大33%),fa-2x, fa-3x, fa-4x, fa-5x。所以用起来很爽是吧。</p>
<p>从wordpress中(其实他没有用fontawesome图标库，而是他们自己的genericons库)，我看到了他是在css中定义这些图标的，试想一下，如果每次使用图标都需要新添加一个元素是不是很累赘，而且重复呢，这不符合程序设计的可复用原则啊！所以很自然的就想到使用class,这样就可以很轻松的在一些元素之前借助于伪类:before加上content神器自动加入，而我需要做的仅仅是在a标签加上一个class名称。</p>
<p>其中很重要的一步是引入这个新font-family FontAwesome。<br>实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[class*=&quot;font-asesome-icon&quot;]:before &#123;</div><div class="line">  font-family: FontAwesome;</div><div class="line">  font-weight: normal;</div><div class="line">  font-style: normal;</div><div class="line">  display: inline-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.secondary-toggle:before &#123;</div><div class="line">    color: #333;</div><div class="line">	font-size: 2rem;</div><div class="line">    content: &quot;\f0c9&quot;;</div><div class="line">    line-height: 40px;</div><div class="line">    width: 40px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;a class=&quot;font-asesome-icon secondary-toggle&quot; href=&quot;#&quot;&gt;列表&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>其中content代表的是该图标的Unicode, 每个fontawesome图标库里都能查到其对应的unicode。<br>上面的是问题一，还有个问题是，我如何改变图标的大小呢？哈哈，我们回想一下这是什么库？对，字体库，所以，既然是字体，改变大小不就是font-size！我们上面是font-size:2rem，也就等于2*16px（rem是什么鬼一会再说），其实仔细查看fontawesome<a href="http://fontawesome.io/examples/" target="_blank" rel="external">官网</a>，然后任选一个图标，点击view css，我们会看到他的实现源码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.@&#123;fa-css-prefix&#125;-lg &#123;</div><div class="line">  font-size: (4em / 3);</div><div class="line">  line-height: (3em / 4);</div><div class="line">  vertical-align: -15%;</div><div class="line">&#125;</div><div class="line">.@&#123;fa-css-prefix&#125;-2x &#123; font-size: 2em; &#125;</div><div class="line">.@&#123;fa-css-prefix&#125;-3x &#123; font-size: 3em; &#125;</div><div class="line">.@&#123;fa-css-prefix&#125;-4x &#123; font-size: 4em; &#125;</div><div class="line">.@&#123;fa-css-prefix&#125;-5x &#123; font-size: 5em; &#125;</div></pre></td></tr></table></figure>
<h2 id="px-em-rem"><a href="#px-em-rem" class="headerlink" title="px, em, rem"></a>px, em, rem</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>px (pixel，像素)</strong>：是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果px要换算成物理长度，需要指定精度DPI(Dots Per Inch，每英寸像素数)，在扫描打印时一般都有DPI可选。Windows系统默认是96dpi，Apple系统默认是72dpi</p>
<p><strong>em</strong> (相对长度单位，相对于当前对象内文本的字体尺寸)：是一个相对长度单位，最初是指字母M的宽度，故名em。现指的是字符宽度的倍数，用法类似百分比，如：0.8em, 1.2em,2em等。通常1em=16px</p>
<p><strong>rem</strong>（root em，根em）(相对长度单位，相对于根节点<code>html</code>的字体尺寸)</p>
<p>在wordpress博客中看到使用了<code>rem</code>，之前只知道<code>em</code>，查看了<a href="https://webdesign.tutsplus.com/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984" target="_blank" rel="external">相关资料</a>后，学习到了:</p>
<ul>
<li>rem 和 em 都是根据你设计的fontsize值最终被浏览器解释成pixel的</li>
<li>em 的值是根据当前他坐在的元素fontsize决定的</li>
<li>rem的值是由html根节点的fontsize决定的</li>
<li>em的值会被父元素的fontsize继承在计算(除非使用pixel显示的设置了当前元素的固定fontsize大小)</li>
<li>rem的值会被在浏览器设置中设置的fontsize大小影响(除非在html根节点下使用了pixel去固定fontsize大小)</li>
<li>有时为了换算方便，经常为body设置fontsize 为65%</li>
</ul>
<h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><ul>
<li>使用rem: 在文本大小值的设置上使用</li>
<li>使用rem或者px: 在media queies中使用</li>
<li>在和文本布局相关中，可使用em，比如某些文本的padding, margin 布局。防止因文本大小变化导致布局变得混乱</li>
<li>在多列布局中，不要使用em或者rem来作为宽度，而使用 <code>%</code>代替</li>
</ul>
]]></content>
    
    <summary type="html">
    
      最近想做个个人博客，看上了wordpress的[twentyfifteen](https://wordpress.org/themes/twentyfifteen/)模板页(2015默认模板)，看上了就想拥有，而拥有是需要付出代价的...
    
    </summary>
    
      <category term="web前端" scheme="http://troyyang.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="web前端" scheme="http://troyyang.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://troyyang.com/tags/css/"/>
    
  </entry>
  
</feed>
